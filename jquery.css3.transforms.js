// Generated by CoffeeScript 1.6.3
(function() {
  var browserCode, generateHook, vendorPrefix;

  $.vendorPrefix = function() {
    var ua;
    ua = navigator.userAgent;
    if (ua.indexOf("Opera") !== -1) {
      return "-o-";
    } else if (ua.indexOf("MSIE") !== -1) {
      return "-ms-";
    } else if (ua.indexOf("WebKit") !== -1) {
      return "-webkit-";
    } else if (navigator.product === "Gecko") {
      return "-moz-";
    } else {
      return "";
    }
  };

  $.browserCode = function() {
    return $.vendorPrefix().slice(1, -1);
  };

  browserCode = $.browserCode();

  vendorPrefix = $.vendorPrefix();

  $.transform = {
    isSupported: function() {
      return typeof $("<div>").get(0).style["" + browserCode + "Transform"] !== "undefined";
    }
  };

  generateHook = function(property, unit) {
    var regExp;
    regExp = new RegExp("" + property + "\\((-?\\d+\\.?\\d*)" + unit + "\\)", "ig");
    return {
      get: function(elem, computed, extra) {
        var match, transform;
        transform = elem.style["" + browserCode + "Transform"];
        if (transform !== "") {
          match = regExp.exec(transform);
          if (!match) {
            match = regExp.exec(elem.style.cssText);
          }
          if (match) {
            return parseFloat(match[1]);
          }
        }
        return 0;
      },
      set: function(elem, value) {
        var elemTransform, transformString;
        value = /\d+\.?\d*/.exec(value)[0] || '0';
        transformString = "" + property + "(" + value + unit + ")";
        elemTransform = elem.style["" + browserCode + "Transform"];
        if (elemTransform.indexOf(property + "(") > -1) {
          elemTransform = elemTransform.replace(regExp, transformString);
        } else {
          elemTransform += transformString;
        }
        return $(elem).css("" + vendorPrefix + "transform", elemTransform);
      }
    };
  };

  $(function() {
    var rotation, rotations, scale, scales, skew, skews, translation, translations, _i, _j, _k, _l, _len, _len1, _len2, _len3;
    rotations = ["rotate", "rotateX", "rotateY", "rotateZ"];
    translations = ["translateX", "translateY", "translateZ"];
    scales = ["scale", "scaleX", "scaleY", "scaleZ"];
    skews = ["skewX", "skewY"];
    for (_i = 0, _len = rotations.length; _i < _len; _i++) {
      rotation = rotations[_i];
      $.cssHooks[rotation] = generateHook(rotation, "deg");
    }
    for (_j = 0, _len1 = translations.length; _j < _len1; _j++) {
      translation = translations[_j];
      $.cssHooks[translation] = generateHook(translation, "px");
    }
    for (_k = 0, _len2 = scales.length; _k < _len2; _k++) {
      scale = scales[_k];
      $.cssHooks[scale] = generateHook(scale, "");
    }
    for (_l = 0, _len3 = skews.length; _l < _len3; _l++) {
      skew = skews[_l];
      $.cssHooks[skew] = generateHook(skew, "deg");
    }
    return $.cssHooks["perspective"] = generateHook("perspective", "px");
  });

}).call(this);
